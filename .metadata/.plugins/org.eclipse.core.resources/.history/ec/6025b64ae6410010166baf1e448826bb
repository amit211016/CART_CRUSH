package com.ecom.controller;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.ObjectUtils;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.ecom.model.Category;
import com.ecom.service.CategoryService;

import jakarta.servlet.http.HttpSession;

@Controller
@RequestMapping(value = "/admin")
public class AdminController {
	
	@Autowired
	private CategoryService categoryService;
	
	
	@GetMapping(value = "/")
	public String index() {
		return "admin/index";
	}
	
	@GetMapping(value = "/loadAddProduct")
	public String loadAddProduct() {
		return "admin/add_product";
	}
	
	@GetMapping(value = "/category")
	public String category(Model model) {
		model.addAttribute("categorys", categoryService.getAllCategory());
		return "admin/category";
	}
	
	//@RequestParam ("file") MultipartFile file : to get the file in input  
	
	@PostMapping(value="/saveCategory")
	public String saveCategory(@ModelAttribute Category category , @RequestParam ("file") MultipartFile file ,
			HttpSession session) throws IOException {
			// Get File Name so we store file name in SQL
			String imageName = file.isEmpty() ? "default.jpg" : file.getOriginalFilename();
			// Set file Name in Category Object
			category.setImageName(imageName);
				    
				    
			Boolean existscategory = categoryService.existsByName(category.getName());
				
			if(existscategory) {
				session.setAttribute("errorMsg", "Category Name Already Exist !");
			}else {
				Category savecategory = categoryService.saveCategory(category);
				System.out.println(savecategory.getIsActive());
				if(ObjectUtils.isEmpty(savecategory)) {
					session.setAttribute("errorMsg", "Category is Not added Due to some internal error !");
				}else {
					// Start File Storing work
					File saveFile = new ClassPathResource("static/img").getFile();
					Path path = Paths.get(saveFile.getAbsolutePath()+ File.separator + "category_img" + File.separator +imageName);
					Files.copy(file.getInputStream(), path, StandardCopyOption.REPLACE_EXISTING);
					System.out.println(path);
					// End File Storing work 
					session.setAttribute("succMsg", " saved sucsessfull");
				}
					
			}
			return "redirect:/admin/category";
		}
	
	@GetMapping(value = "/deleteCategory/{id}")
	public String deleteCategory(@PathVariable int id, HttpSession session) {
		boolean deleteCategory = categoryService.deleteCategory(id);
		if(deleteCategory) {
			session.setAttribute("succMsg","Deleted Successfully!");
		}else session.setAttribute("errorMsg", "Faile due To Some internal issue");
		return "redirect:/admin/category";
	}
	
	@GetMapping(value = "/loadEditCategory/{id}")
	public String loadEditCategory(@PathVariable int id, Model model) {
		Category category = categoryService.getCategoryById(id);
		model.addAttribute("category",category);
		return "admin/edit_category";
	}
	
	@PostMapping(value="/updateCategory")
	public String updateCategory(@ModelAttribute Category category , @RequestParam("file") MultipartFile file , HttpSession session) throws IOException {
		
		Category oldCategory = categoryService.getCategoryById(category.getId());
		String imageName = file.isEmpty() ? oldCategory.getImageName() : file.getOriginalFilename();
		
		if(!ObjectUtils.isEmpty(oldCategory)) {
			oldCategory.setName(category.getName());
			oldCategory.setIsActive(category.getIsActive());
			oldCategory.setImageName(imageName);
		}
		
		Category updateCategory = categoryService.saveCategory(oldCategory);     //   we use the save method of jpa to save data but it also used to update data  
		
		if(ObjectUtils.isEmpty(updateCategory)) {
		    // this is used to store new image in category folder
			if(!file.isEmpty()) {
				File saveFile = new ClassPathResource("static/img").getFile();
				Path path = Paths.get(saveFile.getAbsolutePath()+ File.separator + "category_img" + File.separator +file.getOriginalFilename());
				Files.copy(file.getInputStream(), path, StandardCopyOption.REPLACE_EXISTING);
				System.out.println(path);
			 }
			session.setAttribute("errorMsg", "Category not update due to internal error");
		}else {
			session.setAttribute("succMsg", "Category updated SuccsessFull");
		}
		
		return "redirect:/admin/category/"+category.getId();
	}
}
